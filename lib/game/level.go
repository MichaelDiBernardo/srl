package game

import (
	"fmt"
	"github.com/MichaelDiBernardo/srl/lib/math"
)

type Tile struct {
	Feature *Feature
	Actor   *Obj
	Items   *Inventory
	Pos     math.Point
}

type Map [][]*Tile

type Level struct {
	Map    Map
	Bounds math.Rectangle
	game   *Game
	actors []*Obj
}

// Create a level that uses the given gametory to create game objects, and which
// generated by the given generator function.
func NewLevel(width, height int, game *Game, gen func(*Level) *Level) *Level {
	newmap := Map{}

	// Init all tiles.
	for y := 0; y < height; y++ {
		row := make([]*Tile, width, width)
		for x := 0; x < width; x++ {
			row[x] = &Tile{
				Pos:     math.Pt(x, y),
				Feature: FeatFloor,
				Items:   NewInventory(),
			}
		}
		newmap = append(newmap, row)
	}
	level := &Level{
		Map:    newmap,
		Bounds: math.Rect(math.Origin, math.Pt(width, height)),
		game:   game,
		actors: make([]*Obj, 0),
	}
	return gen(level)
}

func (l *Level) At(p math.Point) *Tile {
	return l.Map[p.Y][p.X]
}

func (l *Level) HasPoint(p math.Point) bool {
	return l.Bounds.HasPoint(p)
}

// Place `o` on the tile at `p`. Returns false if this is impossible (e.g.
// trying to put something on a solid square.)
// This will remove `o` from any tile on any map it was previously on.
func (l *Level) Place(o *Obj, p math.Point) bool {
	t := l.At(p)
	if t.Feature.Solid {
		return false
	}

	switch o.Spec.Family {
	case FamActor:
		return l.placeActor(o, t)
	case FamItem:
		return l.placeItem(o, t)
	default:
		panic(fmt.Sprintf("Tried to place object of family %v", o.Spec.Family))
	}
}

// Removes 'o' from the level.
func (l *Level) Remove(o *Obj) {
	switch o.Spec.Family {
	case FamActor:
		l.removeActor(o)
	default:
		panic(fmt.Sprintf("Tried to remove object of family %v", o.Spec.Family))
	}

}

func (l *Level) Evolve() {
	for _, actor := range l.actors {
		if actor.HasAI() {
			actor.AI.Act(l)
		}
	}
}

func (l *Level) placeActor(obj *Obj, tile *Tile) bool {
	if tile.Actor != nil {
		return false
	}

	// If this actor has been placed before, we need to clear the tile they
	// were on previously. If they haven't, we need to add them to the actor
	// list so we know who they are.
	if obj.Tile != nil {
		obj.Tile.Actor = nil
	} else {
		l.actors = append(l.actors, obj)
	}

	obj.Level = l
	obj.Tile = tile

	tile.Actor = obj

	return true
}

func (l *Level) placeItem(obj *Obj, tile *Tile) bool {
	return tile.Items.Add(obj)
}

func (l *Level) removeActor(obj *Obj) {
	obj.Tile.Actor = nil
	obj.Tile = nil
	obj.Level = nil

	index := -1
	for i, o := range l.actors {
		if o == obj {
			index = i
			break
		}
	}

	if index == -1 {
		panic("Tried to remove actor but wasn't in list.")
	}

	l.actors = append(l.actors[:index], l.actors[index+1:]...)
}
