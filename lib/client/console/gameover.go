package console

import (
	"fmt"
	"github.com/MichaelDiBernardo/srl/lib/game"
	"github.com/nsf/termbox-go"
	"strings"
)

type gameOverScreen struct {
	display display
	panel   panel
}

func newGameOverScreen(display display) *gameOverScreen {
	return &gameOverScreen{
		display: display,
		panel:   newGameOverPanel(display),
	}
}

func (g *gameOverScreen) Render(gm *game.Game) {
	g.panel.Render(gm)
}

// Handle an event generated by the game after the last command.
func (_ *gameOverScreen) Handle(ev game.Event) {
}

// Get the next command from the player to be sent to the game instance.
func (g *gameOverScreen) NextCommand() game.Command {
	for {
		tboxev := g.display.PollEvent()
		if tboxev.Type == termbox.EventKey && (tboxev.Key == termbox.KeyEsc || tboxev.Key == termbox.KeyEnter) {
			return game.QuitCommand{}
		}
	}
}

type gameOverPanel struct {
	display display
}

func newGameOverPanel(display display) *gameOverPanel {
	return &gameOverPanel{display: display}
}

// Listens to nothing.
func (p *gameOverPanel) Handle(e game.Event) {
}

// Render the panel.
func (p *gameOverPanel) Render(g *game.Game) {
	msg := center(fmt.Sprintf("✝✝✝ Ur dead %s ✝✝✝", g.Player.Spec.Name), consoleBounds.Width(), " ")
	p.display.Write(0, 10, msg, termbox.ColorRed, termbox.ColorBlack)
}

func center(s string, width int, fill string) string {
	div := width / 2
	return strings.Repeat(fill, div) + s + strings.Repeat(fill, div)
}
